/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MockAIOracleInterface extends Interface {
  getFunction(
    nameOrSignature: "conf" | "floor" | "getFloorPrice" | "set" | "ts"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "conf", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "floor", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getFloorPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ts", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "conf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "floor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFloorPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ts", data: BytesLike): Result;
}

export interface MockAIOracle extends BaseContract {
  connect(runner?: ContractRunner | null): MockAIOracle;
  waitForDeployment(): Promise<this>;

  interface: MockAIOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  conf: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  floor: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getFloorPrice: TypedContractMethod<
    [marketKey: BytesLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  set: TypedContractMethod<
    [
      marketKey: BytesLike,
      pricePerUnit: BigNumberish,
      confidence: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  ts: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "conf"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "floor"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFloorPrice"
  ): TypedContractMethod<
    [marketKey: BytesLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "set"
  ): TypedContractMethod<
    [
      marketKey: BytesLike,
      pricePerUnit: BigNumberish,
      confidence: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ts"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  filters: {};
}
