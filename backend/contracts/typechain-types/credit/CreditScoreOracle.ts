/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CreditScoreOracleInterface extends Interface {
  getFunction(
    nameOrSignature: "getScore" | "scores" | "setScore" | "updater"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ScoreSet"): EventFragment;

  encodeFunctionData(
    functionFragment: "getScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "scores", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updater", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scores", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setScore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updater", data: BytesLike): Result;
}

export namespace ScoreSetEvent {
  export type InputTuple = [
    user: AddressLike,
    score: BigNumberish,
    at: BigNumberish
  ];
  export type OutputTuple = [user: string, score: bigint, at: bigint];
  export interface OutputObject {
    user: string;
    score: bigint;
    at: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreditScoreOracle extends BaseContract {
  connect(runner?: ContractRunner | null): CreditScoreOracle;
  waitForDeployment(): Promise<this>;

  interface: CreditScoreOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getScore: TypedContractMethod<[u: AddressLike], [[bigint, bigint]], "view">;

  scores: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { score: bigint; updatedAt: bigint }],
    "view"
  >;

  setScore: TypedContractMethod<
    [u: AddressLike, s: BigNumberish],
    [void],
    "nonpayable"
  >;

  updater: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getScore"
  ): TypedContractMethod<[u: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "scores"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { score: bigint; updatedAt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setScore"
  ): TypedContractMethod<
    [u: AddressLike, s: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updater"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ScoreSet"
  ): TypedContractEvent<
    ScoreSetEvent.InputTuple,
    ScoreSetEvent.OutputTuple,
    ScoreSetEvent.OutputObject
  >;

  filters: {
    "ScoreSet(address,uint16,uint64)": TypedContractEvent<
      ScoreSetEvent.InputTuple,
      ScoreSetEvent.OutputTuple,
      ScoreSetEvent.OutputObject
    >;
    ScoreSet: TypedContractEvent<
      ScoreSetEvent.InputTuple,
      ScoreSetEvent.OutputTuple,
      ScoreSetEvent.OutputObject
    >;
  };
}
