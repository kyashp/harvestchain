/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockDeliveryOracle,
  MockDeliveryOracleInterface,
} from "../../oracles/MockDeliveryOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "delivered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "isDelivered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "v",
        type: "bool",
      },
    ],
    name: "setDelivered",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610105908161001c8239f35b600080fdfe608060408181526004361015601357600080fd5b600091823560e01c9081634b5e41081460a757508063b5df70d414606c5763dcdb69d214603f57600080fd5b34606857602036600319011260685760ff81602093600435815280855220541690519015158152f35b5080fd5b5034606857806003193601126068576024359081151580920360a35760043583528260205282209060ff8019835416911617905580f35b8280fd5b9190503460a357602036600319011260a3576004358352602083815292205460ff1615158152f3fea26469706673582212202454e44e26ba21dfebda97c5e79b20b3bfbc51b87d1694f1b6ff7fbaef529f3064736f6c63430008180033";

type MockDeliveryOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDeliveryOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDeliveryOracle__factory extends ContractFactory {
  constructor(...args: MockDeliveryOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockDeliveryOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockDeliveryOracle__factory {
    return super.connect(runner) as MockDeliveryOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDeliveryOracleInterface {
    return new Interface(_abi) as MockDeliveryOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockDeliveryOracle {
    return new Contract(address, _abi, runner) as unknown as MockDeliveryOracle;
  }
}
