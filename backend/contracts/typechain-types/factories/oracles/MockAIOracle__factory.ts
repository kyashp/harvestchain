/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockAIOracle,
  MockAIOracleInterface,
} from "../../oracles/MockAIOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "conf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "floor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "marketKey",
        type: "bytes32",
      },
    ],
    name: "getFloorPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "marketKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "pricePerUnit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "confidence",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "ts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610182908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c8063359c351d146101135780635ca0e7a4146100ed578063b831e65b146100c6578063d15d2587146100825763dd873ef81461005857600080fd5b3461007e57602036600319011261007e5760209282913581526001845220549051908152f35b8280fd5b503461007e57602036600319011261007e57916060923581528060205281812054916001602052808083205492600260205220549181519384526020840152820152f35b503461007e57602036600319011261007e5760209282913581526002845220549051908152f35b503461007e57602036600319011261007e57602092829135815280845220549051908152f35b503461007e57606036600319011261007e5735825281602052602435818320556001602052604435818320556002602052429082205580f3fea26469706673582212200931a400f94cd5876f8c8b11453f2b981b4eb60112ed3bcb4a6651f3034d3d4c64736f6c63430008180033";

type MockAIOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAIOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAIOracle__factory extends ContractFactory {
  constructor(...args: MockAIOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAIOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAIOracle__factory {
    return super.connect(runner) as MockAIOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAIOracleInterface {
    return new Interface(_abi) as MockAIOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAIOracle {
    return new Contract(address, _abi, runner) as unknown as MockAIOracle;
  }
}
