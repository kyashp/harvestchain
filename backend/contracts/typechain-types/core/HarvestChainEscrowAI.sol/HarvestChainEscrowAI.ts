/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface HarvestChainEscrowAIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ROLE_COOP_MEMBER"
      | "acceptOrder"
      | "aiOracle"
      | "createOrder"
      | "credit"
      | "deliveryOracle"
      | "feeReceiver"
      | "fundRemainder"
      | "markDelivered"
      | "nextOrderId"
      | "orders"
      | "protocolFeeBps"
      | "settle"
      | "ssi"
      | "surrender"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyerFunded"
      | "BuyerSurrendered"
      | "Cancelled"
      | "Delivered"
      | "OrderAccepted"
      | "OrderCreated"
      | "SellerBondFunded"
      | "Settled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ROLE_COOP_MEMBER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOrder",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "aiOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "credit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deliveryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundRemainder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markDelivered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ssi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "surrender",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ROLE_COOP_MEMBER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aiOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "credit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deliveryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundRemainder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markDelivered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ssi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "surrender", data: BytesLike): Result;
}

export namespace BuyerFundedEvent {
  export type InputTuple = [
    id: BigNumberish,
    amount: BigNumberish,
    totalFunded: BigNumberish
  ];
  export type OutputTuple = [id: bigint, amount: bigint, totalFunded: bigint];
  export interface OutputObject {
    id: bigint;
    amount: bigint;
    totalFunded: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyerSurrenderedEvent {
  export type InputTuple = [
    id: BigNumberish,
    forfeitedToSeller: BigNumberish,
    refundedToBuyer: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    forfeitedToSeller: bigint,
    refundedToBuyer: bigint
  ];
  export interface OutputObject {
    id: bigint;
    forfeitedToSeller: bigint;
    refundedToBuyer: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelledEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeliveredEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderAcceptedEvent {
  export type InputTuple = [
    id: BigNumberish,
    seller: AddressLike,
    unitPrice: BigNumberish,
    aiFloorPrice: BigNumberish,
    sellerBond: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    seller: string,
    unitPrice: bigint,
    aiFloorPrice: bigint,
    sellerBond: bigint
  ];
  export interface OutputObject {
    id: bigint;
    seller: string;
    unitPrice: bigint;
    aiFloorPrice: bigint;
    sellerBond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    buyer: AddressLike,
    marketKey: BytesLike,
    qty: BigNumberish,
    maxUnitPrice: BigNumberish,
    depositBps: BigNumberish,
    forfeitBps: BigNumberish,
    maxDiscountBps: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    buyer: string,
    marketKey: string,
    qty: bigint,
    maxUnitPrice: bigint,
    depositBps: bigint,
    forfeitBps: bigint,
    maxDiscountBps: bigint
  ];
  export interface OutputObject {
    id: bigint;
    buyer: string;
    marketKey: string;
    qty: bigint;
    maxUnitPrice: bigint;
    depositBps: bigint;
    forfeitBps: bigint;
    maxDiscountBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellerBondFundedEvent {
  export type InputTuple = [id: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [id: bigint, amount: bigint];
  export interface OutputObject {
    id: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettledEvent {
  export type InputTuple = [
    id: BigNumberish,
    seller: AddressLike,
    sellerPayout: BigNumberish,
    protocolFee: BigNumberish,
    buyerRefund: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    seller: string,
    sellerPayout: bigint,
    protocolFee: bigint,
    buyerRefund: bigint
  ];
  export interface OutputObject {
    id: bigint;
    seller: string;
    sellerPayout: bigint;
    protocolFee: bigint;
    buyerRefund: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HarvestChainEscrowAI extends BaseContract {
  connect(runner?: ContractRunner | null): HarvestChainEscrowAI;
  waitForDeployment(): Promise<this>;

  interface: HarvestChainEscrowAIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ROLE_COOP_MEMBER: TypedContractMethod<[], [string], "view">;

  acceptOrder: TypedContractMethod<
    [id: BigNumberish, unitPrice: BigNumberish, sellerBond: BigNumberish],
    [void],
    "nonpayable"
  >;

  aiOracle: TypedContractMethod<[], [string], "view">;

  createOrder: TypedContractMethod<
    [
      token: AddressLike,
      marketKey: BytesLike,
      quantity: BigNumberish,
      maxUnitPrice: BigNumberish,
      depositBps: BigNumberish,
      forfeitBps: BigNumberish,
      maxDiscountBps: BigNumberish,
      acceptBy: BigNumberish,
      deliverBy: BigNumberish,
      initialDepositAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  credit: TypedContractMethod<[], [string], "view">;

  deliveryOracle: TypedContractMethod<[], [string], "view">;

  feeReceiver: TypedContractMethod<[], [string], "view">;

  fundRemainder: TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  markDelivered: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  nextOrderId: TypedContractMethod<[], [bigint], "view">;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        buyer: string;
        seller: string;
        token: string;
        marketKey: string;
        quantity: bigint;
        unitPrice: bigint;
        notional: bigint;
        aiFloorPrice: bigint;
        depositBps: bigint;
        forfeitBps: bigint;
        maxDiscountBps: bigint;
        sellerBond: bigint;
        buyerEscrowed: bigint;
        sellerEscrowed: bigint;
        state: bigint;
        createdAt: bigint;
        acceptBy: bigint;
        deliverBy: bigint;
      }
    ],
    "view"
  >;

  protocolFeeBps: TypedContractMethod<[], [bigint], "view">;

  settle: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  ssi: TypedContractMethod<[], [string], "view">;

  surrender: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ROLE_COOP_MEMBER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOrder"
  ): TypedContractMethod<
    [id: BigNumberish, unitPrice: BigNumberish, sellerBond: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "aiOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [
      token: AddressLike,
      marketKey: BytesLike,
      quantity: BigNumberish,
      maxUnitPrice: BigNumberish,
      depositBps: BigNumberish,
      forfeitBps: BigNumberish,
      maxDiscountBps: BigNumberish,
      acceptBy: BigNumberish,
      deliverBy: BigNumberish,
      initialDepositAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deliveryOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundRemainder"
  ): TypedContractMethod<
    [id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "markDelivered"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextOrderId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        buyer: string;
        seller: string;
        token: string;
        marketKey: string;
        quantity: bigint;
        unitPrice: bigint;
        notional: bigint;
        aiFloorPrice: bigint;
        depositBps: bigint;
        forfeitBps: bigint;
        maxDiscountBps: bigint;
        sellerBond: bigint;
        buyerEscrowed: bigint;
        sellerEscrowed: bigint;
        state: bigint;
        createdAt: bigint;
        acceptBy: bigint;
        deliverBy: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "settle"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ssi"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "surrender"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BuyerFunded"
  ): TypedContractEvent<
    BuyerFundedEvent.InputTuple,
    BuyerFundedEvent.OutputTuple,
    BuyerFundedEvent.OutputObject
  >;
  getEvent(
    key: "BuyerSurrendered"
  ): TypedContractEvent<
    BuyerSurrenderedEvent.InputTuple,
    BuyerSurrenderedEvent.OutputTuple,
    BuyerSurrenderedEvent.OutputObject
  >;
  getEvent(
    key: "Cancelled"
  ): TypedContractEvent<
    CancelledEvent.InputTuple,
    CancelledEvent.OutputTuple,
    CancelledEvent.OutputObject
  >;
  getEvent(
    key: "Delivered"
  ): TypedContractEvent<
    DeliveredEvent.InputTuple,
    DeliveredEvent.OutputTuple,
    DeliveredEvent.OutputObject
  >;
  getEvent(
    key: "OrderAccepted"
  ): TypedContractEvent<
    OrderAcceptedEvent.InputTuple,
    OrderAcceptedEvent.OutputTuple,
    OrderAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCreated"
  ): TypedContractEvent<
    OrderCreatedEvent.InputTuple,
    OrderCreatedEvent.OutputTuple,
    OrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SellerBondFunded"
  ): TypedContractEvent<
    SellerBondFundedEvent.InputTuple,
    SellerBondFundedEvent.OutputTuple,
    SellerBondFundedEvent.OutputObject
  >;
  getEvent(
    key: "Settled"
  ): TypedContractEvent<
    SettledEvent.InputTuple,
    SettledEvent.OutputTuple,
    SettledEvent.OutputObject
  >;

  filters: {
    "BuyerFunded(uint256,uint256,uint256)": TypedContractEvent<
      BuyerFundedEvent.InputTuple,
      BuyerFundedEvent.OutputTuple,
      BuyerFundedEvent.OutputObject
    >;
    BuyerFunded: TypedContractEvent<
      BuyerFundedEvent.InputTuple,
      BuyerFundedEvent.OutputTuple,
      BuyerFundedEvent.OutputObject
    >;

    "BuyerSurrendered(uint256,uint256,uint256)": TypedContractEvent<
      BuyerSurrenderedEvent.InputTuple,
      BuyerSurrenderedEvent.OutputTuple,
      BuyerSurrenderedEvent.OutputObject
    >;
    BuyerSurrendered: TypedContractEvent<
      BuyerSurrenderedEvent.InputTuple,
      BuyerSurrenderedEvent.OutputTuple,
      BuyerSurrenderedEvent.OutputObject
    >;

    "Cancelled(uint256)": TypedContractEvent<
      CancelledEvent.InputTuple,
      CancelledEvent.OutputTuple,
      CancelledEvent.OutputObject
    >;
    Cancelled: TypedContractEvent<
      CancelledEvent.InputTuple,
      CancelledEvent.OutputTuple,
      CancelledEvent.OutputObject
    >;

    "Delivered(uint256)": TypedContractEvent<
      DeliveredEvent.InputTuple,
      DeliveredEvent.OutputTuple,
      DeliveredEvent.OutputObject
    >;
    Delivered: TypedContractEvent<
      DeliveredEvent.InputTuple,
      DeliveredEvent.OutputTuple,
      DeliveredEvent.OutputObject
    >;

    "OrderAccepted(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      OrderAcceptedEvent.InputTuple,
      OrderAcceptedEvent.OutputTuple,
      OrderAcceptedEvent.OutputObject
    >;
    OrderAccepted: TypedContractEvent<
      OrderAcceptedEvent.InputTuple,
      OrderAcceptedEvent.OutputTuple,
      OrderAcceptedEvent.OutputObject
    >;

    "OrderCreated(uint256,address,bytes32,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;
    OrderCreated: TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;

    "SellerBondFunded(uint256,uint256)": TypedContractEvent<
      SellerBondFundedEvent.InputTuple,
      SellerBondFundedEvent.OutputTuple,
      SellerBondFundedEvent.OutputObject
    >;
    SellerBondFunded: TypedContractEvent<
      SellerBondFundedEvent.InputTuple,
      SellerBondFundedEvent.OutputTuple,
      SellerBondFundedEvent.OutputObject
    >;

    "Settled(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;
    Settled: TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;
  };
}
