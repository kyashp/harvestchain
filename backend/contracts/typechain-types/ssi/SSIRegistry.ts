/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SSIRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedUntil"
      | "isAuthorized"
      | "setAuthorized"
      | "verifier"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Authorized"): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedUntil",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorized",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "authorizedUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace AuthorizedEvent {
  export type InputTuple = [
    user: AddressLike,
    role: BytesLike,
    until: BigNumberish
  ];
  export type OutputTuple = [user: string, role: string, until: bigint];
  export interface OutputObject {
    user: string;
    role: string;
    until: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SSIRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): SSIRegistry;
  waitForDeployment(): Promise<this>;

  interface: SSIRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedUntil: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  isAuthorized: TypedContractMethod<
    [user: AddressLike, role: BytesLike],
    [boolean],
    "view"
  >;

  setAuthorized: TypedContractMethod<
    [user: AddressLike, role: BytesLike, until: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedUntil"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<
    [user: AddressLike, role: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAuthorized"
  ): TypedContractMethod<
    [user: AddressLike, role: BytesLike, until: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Authorized"
  ): TypedContractEvent<
    AuthorizedEvent.InputTuple,
    AuthorizedEvent.OutputTuple,
    AuthorizedEvent.OutputObject
  >;

  filters: {
    "Authorized(address,bytes32,uint64)": TypedContractEvent<
      AuthorizedEvent.InputTuple,
      AuthorizedEvent.OutputTuple,
      AuthorizedEvent.OutputObject
    >;
    Authorized: TypedContractEvent<
      AuthorizedEvent.InputTuple,
      AuthorizedEvent.OutputTuple,
      AuthorizedEvent.OutputObject
    >;
  };
}
